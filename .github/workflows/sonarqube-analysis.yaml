name: SonarQube Analysis

on:
  workflow_call:
    inputs:
      project-key:
        description: 'SonarQube project key'
        required: true
        type: string
      node-version:
        description: 'Node.js version'
        required: false
        type: string
        default: '18'
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  analysis:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Configure AWS CodeArtifact
        env:
          AWS_REGION: us-east-2
          AWS_CODEARTIFACT_DOMAIN: ledgerlink
          AWS_CODEARTIFACT_DOMAIN_OWNER: 417691602217
          CODEARTIFACT_REPO_NAME: ledgerlink
        run: |
          export AWS_CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain $AWS_CODEARTIFACT_DOMAIN \
            --domain-owner $AWS_CODEARTIFACT_DOMAIN_OWNER \
            --query authorizationToken --output text)
          npm config set registry "https://${AWS_CODEARTIFACT_DOMAIN}-${AWS_CODEARTIFACT_DOMAIN_OWNER}.d.codeartifact.${AWS_REGION}.amazonaws.com/npm/${CODEARTIFACT_REPO_NAME}/"
          npm config set //${AWS_CODEARTIFACT_DOMAIN}-${AWS_CODEARTIFACT_DOMAIN_OWNER}.d.codeartifact.${AWS_REGION}.amazonaws.com/npm/${CODEARTIFACT_REPO_NAME}/:_authToken=$AWS_CODEARTIFACT_AUTH_TOKEN
          npm config set @ledgerlink:registry "https://${AWS_CODEARTIFACT_DOMAIN}-${AWS_CODEARTIFACT_DOMAIN_OWNER}.d.codeartifact.${AWS_REGION}.amazonaws.com/npm/${CODEARTIFACT_REPO_NAME}/"

      - name: Install dependencies
        run: npm install

      - name: Install SonarQube Scanner
        run: npm install --save-dev sonarqube-scanner

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube Scan
        id: sonarqube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          PROJECT_KEY: ${{ inputs.project-key }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
          PATH: ${{ env.JAVA_HOME }}/bin:${{ env.PATH }}
        run: |
          echo "Running SonarQube scan..."
          node_modules/.bin/sonarqube-scanner \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.sources=. \
            -Dsonar.exclusions=coverage/**,!coverage/lcov.info,node_modules/**,dist/** \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

          echo "Waiting 90 seconds for Quality Gate result..."
          sleep 90

          QG_RESPONSE=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY")
          QG_STATUS=$(echo "$QG_RESPONSE" | jq -r '.projectStatus.status')

          echo "Quality Gate API Response: $QG_RESPONSE"
          echo "status=$QG_STATUS" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          PROJECT_KEY: ${{ inputs.project-key }}
          STATUS: ${{ steps.sonarqube.outputs.status }}
        run: |
          if [ "$STATUS" == "OK" ]; then
            STATUS_TEXT="✅ Quality Gate PASSED"
            COLOR="#36a64f"
          elif [ "$STATUS" == "ERROR" ]; then
            STATUS_TEXT="❌ Quality Gate FAILED"
            COLOR="#ff0000"
          else
            STATUS_TEXT="⚠️ Quality Gate UNKNOWN"
            COLOR="#FFCC00"
          fi

          PR_TEXT="<${GITHUB_SERVER_URL}/${GITHUB_REPO}/pull/${GITHUB_PR_NUMBER}|View Pull Request>"
          SONAR_URL="<${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}|View SonarQube Dashboard>"

          PAYLOAD=$(jq -n \
            --arg text "$STATUS_TEXT" \
            --arg color "$COLOR" \
            --arg pr_text "$PR_TEXT" \
            --arg sonar_url "$SONAR_URL" \
            '{"text": $text, "attachments": [{"color": $color, "fields": [{"title": "PR Link", "value": $pr_text}, {"title": "Report", "value": $sonar_url}]}]}')

          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL"
